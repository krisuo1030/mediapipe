import mediapipe as mp
import cv2
import math
import random
from datetime import datetime, timedelta

#打開攝像機
cap=cv2.VideoCapture(0) #鏡頭數量0,1...

#初始化和繪圖工具
mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils

#根據兩點的座標，計算角度
def vector_angle(v1,v2):
    v1_x = v1[0]
    v1_y = v1[1]
    v2_x = v2[0]
    v2_y = v2[1]
   
    angle = v1_x * v2_x + v1_y * v2_y
    vector_v1 = (v1_x ** 2 + v1_y ** 2) ** 0.5
    vector_v2 = (v2_x ** 2 + v2_y ** 2) ** 0.5
    if vector_v1 == 0 or vector_v2 == 0:
        return print("向量為0無法計算!!!!")
    angle = angle / (vector_v1 * vector_v2)
    angle = min(1, max(-1, angle))
    angle = math.degrees(math.acos(angle))
    return angle

# 根據21個地標計算手指角度
def hand_angle(hand_):
    angle_list = []
   
    #大拇指
    angle = vector_angle(
        ((int(hand_[0][0])- int(hand_[2][0])),(int(hand_[0][1])- int(hand_[2][1]))),
        ((int(hand_[3][0])- int(hand_[4][0])),(int(hand_[3][1])- int(hand_[4][1])))
    )
    angle_list.append(angle)
    #食指
    angle = vector_angle(
        ((int(hand_[0][0])- int(hand_[6][0])),(int(hand_[0][1])- int(hand_[6][1]))),
        ((int(hand_[7][0])- int(hand_[8][0])),(int(hand_[7][1])- int(hand_[8][1])))
    )
    angle_list.append(angle)
    #中指
    angle = vector_angle(
        ((int(hand_[0][0])- int(hand_[10][0])),(int(hand_[0][1])- int(hand_[10][1]))),
        ((int(hand_[11][0])- int(hand_[12][0])),(int(hand_[11][1])- int(hand_[12][1])))
    )
    angle_list.append(angle)
    #無名指
    angle = vector_angle(
        ((int(hand_[0][0])- int(hand_[14][0])),(int(hand_[0][1])- int(hand_[14][1]))),
        ((int(hand_[15][0])- int(hand_[16][0])),(int(hand_[15][1])- int(hand_[16][1])))
    )
    angle_list.append(angle)
    #小指
    angle = vector_angle(
        ((int(hand_[0][0])- int(hand_[18][0])),(int(hand_[0][1])- int(hand_[18][1]))),
        ((int(hand_[19][0])- int(hand_[20][0])),(int(hand_[19][1])- int(hand_[20][1])))
    )
    angle_list.append(angle)
    return angle_list

#根據手指角度的串列內容，返回對應的手勢名稱
def hand_pos(finger_angle):
    f1 = finger_angle[0]    #大拇指角度
    f2 = finger_angle[1]    #食指角度
    f3 = finger_angle[2]    #中指角度
    f4 = finger_angle[3]    #無名指角度
    f5 = finger_angle[4]    #小拇指角度
   

    if f1>=50 and f2>=50 and f3>=50 and f4>=50 and f5>=50:
        return "0"
    if f1>=50 and f2<50 and f3>=50 and f4>=50 and f5>=50:
        return "1"
    if f1>=50 and f2<50 and f3<50 and f4>=50 and f5>=50:
        return "2"
    if f1>=50 and f2<50 and f3<50 and f4<50 and f5>50:
        return "3"
    if f1>=50 and f2<50 and f3<50 and f4<50 and f5<50:
        return "4"
    if f1<50 and f2<50 and f3<50 and f4<50 and f5<50:
        return "5"
    if f1<50 and f2>=50 and f3>=50 and f4>=50 and f5<50:
        return "6"
    if f1<50 and f2<50 and f3>=50 and f4>=50 and f5>=50:
        return "7"
    if f1<50 and f2<50 and f3<50 and f4>=50 and f5>=50:
        return "8"
    if f1<50 and f2<50 and f3<50 and f4<50 and f5>=50:
        return "9"
    else:
        return ""
   
fontFace = cv2.FONT_HERSHEY_SIMPLEX
lineType = cv2.LINE_AA


if not cap.isOpened():
    print("無法讀取攝像頭")
else:
    with mp_hands.Hands(
        model_complexity=0,
        min_detection_confidence=0.5,
        min_tracking_confidence=0.5) as hands:
        
        number_to_match = random.randint(0, 9)
        print("target number:",number_to_match)
        start_time = None
        correct_match_time = None
       
        while cap.isOpened():
            ret,frame = cap.read()
            if not ret:
                print("無法讀取攝像頭")
                break
           
            frame_rgb = cv2.cvtColor(frame,cv2.COLOR_BGR2RGB)
            results = hands.process(frame_rgb)
            h,w,c = frame.shape
           

            gesture = ""
            if results.multi_hand_landmarks:
                for hand_landmarks in results.multi_hand_landmarks:
                    mp_drawing.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)
                    finger_points = []
                    for index, landmark in enumerate(hand_landmarks.landmark):
                        x, y = int(landmark.x * w), int(landmark.y * h)
                        cv2.putText(frame, str(index), (x, y), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 1)
                        finger_points.append((x, y))
   
                    if finger_points:
                        finger_angle = hand_angle(finger_points)
                        gesture = hand_pos(finger_angle)
                        
   
            # 比較手勢和隨機數字是否匹配
            if gesture:
                if gesture == str(number_to_match):
                    if correct_match_time is None:
                        correct_match_time = datetime.now()
                    cv2.putText(frame, "correct", (50, 300), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 255, 0), 5)
                    if (datetime.now()-correct_match_time).total_seconds() >= 2:
                        number_to_match = random.randint(0, 9)
                        print("target number:",number_to_match)
                        correct_match_time = None
                if gesture != str(number_to_match):
                    if start_time is None:
                        start_time = datetime.now()
                    elif(datetime.now()-start_time).total_seconds() >= 3:
                        cv2.putText(frame, "wrong", (50, 300), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 255), 5)
                        start_time = None
            cv2.putText(frame, str(number_to_match), (50, 200), fontFace, 3, (0, 255, 0), 5)
    
            # 視窗名稱
            cv2.imshow("mediapipe", frame)
    
            # 按下"q"鍵退出
            if cv2.waitKey(5) & 0xFF == ord('q'):
                break

# 釋放攝像頭並關閉所有視窗
cap.release()
cv2.destroyAllWindows()
